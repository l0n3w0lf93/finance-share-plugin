// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: proto/bill/bill.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BillsClient is the client API for Bills service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillsClient interface {
	CreateBills(ctx context.Context, in *CreateBillsRequest, opts ...grpc.CallOption) (*CreateBillsReply, error)
	UpdateBills(ctx context.Context, in *UpdateBillsRequest, opts ...grpc.CallOption) (*UpdateBillsReply, error)
	DeleteBills(ctx context.Context, in *DeleteBillsRequest, opts ...grpc.CallOption) (*DeleteBillsReply, error)
	GetBills(ctx context.Context, in *GetBillsRequest, opts ...grpc.CallOption) (*GetBillsReply, error)
	ListBills(ctx context.Context, in *ListBillsRequest, opts ...grpc.CallOption) (*ListBillsReply, error)
}

type billsClient struct {
	cc grpc.ClientConnInterface
}

func NewBillsClient(cc grpc.ClientConnInterface) BillsClient {
	return &billsClient{cc}
}

func (c *billsClient) CreateBills(ctx context.Context, in *CreateBillsRequest, opts ...grpc.CallOption) (*CreateBillsReply, error) {
	out := new(CreateBillsReply)
	err := c.cc.Invoke(ctx, "/proto.Bills/CreateBills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billsClient) UpdateBills(ctx context.Context, in *UpdateBillsRequest, opts ...grpc.CallOption) (*UpdateBillsReply, error) {
	out := new(UpdateBillsReply)
	err := c.cc.Invoke(ctx, "/proto.Bills/UpdateBills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billsClient) DeleteBills(ctx context.Context, in *DeleteBillsRequest, opts ...grpc.CallOption) (*DeleteBillsReply, error) {
	out := new(DeleteBillsReply)
	err := c.cc.Invoke(ctx, "/proto.Bills/DeleteBills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billsClient) GetBills(ctx context.Context, in *GetBillsRequest, opts ...grpc.CallOption) (*GetBillsReply, error) {
	out := new(GetBillsReply)
	err := c.cc.Invoke(ctx, "/proto.Bills/GetBills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billsClient) ListBills(ctx context.Context, in *ListBillsRequest, opts ...grpc.CallOption) (*ListBillsReply, error) {
	out := new(ListBillsReply)
	err := c.cc.Invoke(ctx, "/proto.Bills/ListBills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillsServer is the server API for Bills service.
// All implementations must embed UnimplementedBillsServer
// for forward compatibility
type BillsServer interface {
	CreateBills(context.Context, *CreateBillsRequest) (*CreateBillsReply, error)
	UpdateBills(context.Context, *UpdateBillsRequest) (*UpdateBillsReply, error)
	DeleteBills(context.Context, *DeleteBillsRequest) (*DeleteBillsReply, error)
	GetBills(context.Context, *GetBillsRequest) (*GetBillsReply, error)
	ListBills(context.Context, *ListBillsRequest) (*ListBillsReply, error)
	mustEmbedUnimplementedBillsServer()
}

// UnimplementedBillsServer must be embedded to have forward compatible implementations.
type UnimplementedBillsServer struct {
}

func (UnimplementedBillsServer) CreateBills(context.Context, *CreateBillsRequest) (*CreateBillsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBills not implemented")
}
func (UnimplementedBillsServer) UpdateBills(context.Context, *UpdateBillsRequest) (*UpdateBillsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBills not implemented")
}
func (UnimplementedBillsServer) DeleteBills(context.Context, *DeleteBillsRequest) (*DeleteBillsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBills not implemented")
}
func (UnimplementedBillsServer) GetBills(context.Context, *GetBillsRequest) (*GetBillsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBills not implemented")
}
func (UnimplementedBillsServer) ListBills(context.Context, *ListBillsRequest) (*ListBillsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBills not implemented")
}
func (UnimplementedBillsServer) mustEmbedUnimplementedBillsServer() {}

// UnsafeBillsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillsServer will
// result in compilation errors.
type UnsafeBillsServer interface {
	mustEmbedUnimplementedBillsServer()
}

func RegisterBillsServer(s grpc.ServiceRegistrar, srv BillsServer) {
	s.RegisterService(&Bills_ServiceDesc, srv)
}

func _Bills_CreateBills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillsServer).CreateBills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Bills/CreateBills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillsServer).CreateBills(ctx, req.(*CreateBillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bills_UpdateBills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillsServer).UpdateBills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Bills/UpdateBills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillsServer).UpdateBills(ctx, req.(*UpdateBillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bills_DeleteBills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillsServer).DeleteBills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Bills/DeleteBills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillsServer).DeleteBills(ctx, req.(*DeleteBillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bills_GetBills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillsServer).GetBills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Bills/GetBills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillsServer).GetBills(ctx, req.(*GetBillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bills_ListBills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillsServer).ListBills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Bills/ListBills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillsServer).ListBills(ctx, req.(*ListBillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bills_ServiceDesc is the grpc.ServiceDesc for Bills service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bills_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Bills",
	HandlerType: (*BillsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBills",
			Handler:    _Bills_CreateBills_Handler,
		},
		{
			MethodName: "UpdateBills",
			Handler:    _Bills_UpdateBills_Handler,
		},
		{
			MethodName: "DeleteBills",
			Handler:    _Bills_DeleteBills_Handler,
		},
		{
			MethodName: "GetBills",
			Handler:    _Bills_GetBills_Handler,
		},
		{
			MethodName: "ListBills",
			Handler:    _Bills_ListBills_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bill/bill.proto",
}
